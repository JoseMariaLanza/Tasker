// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tasker.Repositories.Tasks;

#nullable disable

namespace Tasker.Repositories.Migrations.TaskDb
{
    [DbContext(typeof(TaskDbContext))]
    [Migration("20240707164751_Update_Database")]
    partial class Update_Database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("TaskItems")
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Tasker.Repositories.Auth.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserType", "TaskItems");
                });

            modelBuilder.Entity("Tasker.Repositories.Tasks.Models.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AssignedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId");

                    b.ToTable("TaskItems", "TaskItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Task item 1 description",
                            IsActive = true,
                            Name = "Task item 1",
                            PriorityId = 0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Task item 2 description",
                            IsActive = true,
                            Name = "Task item 2",
                            PriorityId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Task item 3 description",
                            IsActive = true,
                            Name = "Task item 3",
                            ParentTaskId = 1,
                            PriorityId = 4
                        },
                        new
                        {
                            Id = 4,
                            Description = "Task item 4 description",
                            IsActive = true,
                            Name = "Task item 4",
                            ParentTaskId = 6,
                            PriorityId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Task item 5 description",
                            IsActive = true,
                            Name = "Task item 5",
                            PriorityId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Task item 6 description",
                            IsActive = true,
                            Name = "Task item 6",
                            ParentTaskId = 1,
                            PriorityId = 5
                        });
                });

            modelBuilder.Entity("Tasker.Repositories.Tasks.Models.TaskItemCategory", b =>
                {
                    b.Property<int>("TaskItemId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("TaskItemId", "CategoryId");

                    b.ToTable("TaskItemCategories", "TaskItems");
                });

            modelBuilder.Entity("Tasker.Repositories.Tasks.Models.TaskItem", b =>
                {
                    b.HasOne("Tasker.Repositories.Tasks.Models.TaskItem", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId");

                    b.Navigation("ParentTask");
                });

            modelBuilder.Entity("Tasker.Repositories.Tasks.Models.TaskItemCategory", b =>
                {
                    b.HasOne("Tasker.Repositories.Tasks.Models.TaskItem", null)
                        .WithMany("TaskItemCategories")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tasker.Repositories.Tasks.Models.TaskItem", b =>
                {
                    b.Navigation("SubTasks");

                    b.Navigation("TaskItemCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
